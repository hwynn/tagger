import unittest
import MetadataManagerL0
import datetime
import os

from TestingManager import loadFiles, cloneThese, releaseAllClones, singleClone, checkAllKeysPresent, checkAnyKeysPresent
from TData import g_files, g_files2, sampleData

g_allfiles = [
	g_files["fixingComputer.jpg"],
	g_files["catScreamPizza.jpg"],
	g_files["rippledotzero.jpg"],
	g_files2['pokefile0'],
	g_files2['pokefile1'],
	g_files2['pokefile2'],
	g_files2['pokefile3'],
	g_files2['pokefile4'],
	g_files2['pokefile5'],
	g_files2['pokefile6'],
	g_files2['pokefile7'],
	g_files2['pokefile8'],
	g_files2['pokefile9']]
g_loadednames = loadFiles(g_allfiles)
g_clonenames = cloneThese(g_loadednames)

class FunctionCheck_TranslationTests(unittest.TestCase):
	"""
	#give a key, (maybe a metadata type), and a sample value
	#first we'll have a human readable sample value valA
	#valB is valA untranslated (not human readable)
	# +------+              +------+              +------+               +------+
	# | valA | --untran---> | valB | -- tran ---> | valC |  --untran---> | valD | 
	# +------+              +------+              +------+               +------+
	#         valA == valC  && valB==valD
	"""
	def compareTranslation(self, p_key, p_value):
		f_valA = p_value
		f_valB = MetadataManagerL0.g_untranslaters[p_key](f_valA)
		f_valC = MetadataManagerL0.g_translaters[p_key](f_valB)
		#f_valD = MetadataManagerL0.g_untranslaters[p_key](f_valC)
		self.assertEqual(f_valA, f_valC)
	def compareUntranslation(self, p_key, p_value):
		f_valA = p_value
		f_valB = MetadataManagerL0.g_untranslaters[p_key](f_valA)
		f_valC = MetadataManagerL0.g_translaters[p_key](f_valB)
		f_valD = MetadataManagerL0.g_untranslaters[p_key](f_valC)
		self.assertEqual(f_valB, f_valD)
	def test_allComparisons(self):
		pass
		self.compareTranslation('Exif.Image.XPTitle', "Sample Title")
		self.compareUntranslation('Exif.Image.XPTitle', "Sample Title")
		self.compareTranslation('Exif.Image.XPSubject', "Unused Key Value")
		self.compareUntranslation('Exif.Image.XPSubject', "Unused Key Value")
		self.compareTranslation('Exif.Image.XPComment',
								'This is a long sample value for a description.\n\nHopefully this works.\n##!!value!!##')
		self.compareUntranslation('Exif.Image.XPComment',
								  'This is a long sample value for a description.\n\nHopefully this works.\n##!!value!!##')
		self.compareTranslation('Exif.Image.ImageDescription', "Sample Title")
		self.compareUntranslation('Exif.Image.ImageDescription', "Sample Title")
		self.compareTranslation('Exif.Image.XPKeywords', ['mspaint', 'internet jokes'])
		self.compareUntranslation('Exif.Image.XPKeywords', ['mspaint', 'internet jokes'])
		self.compareTranslation('Exif.Image.XPAuthor', ['xX_KillerZ5_Xx', 'Player: Matt Mcmuscles'])
		self.compareUntranslation('Exif.Image.XPAuthor', ['xX_KillerZ5_Xx', 'Player: Matt Mcmuscles'])
		self.compareTranslation('Xmp.dc.title', "Sample Title")
		self.compareUntranslation('Xmp.dc.title', "Sample Title")
		self.compareTranslation('Xmp.dc.description', "Sample Title")
		self.compareUntranslation('Xmp.dc.description', "Sample Title")
		self.compareTranslation('Xmp.dc.subject', ['mspaint', 'internet jokes'])
		self.compareUntranslation('Xmp.dc.subject', ['mspaint', 'internet jokes'])
		self.compareTranslation('Xmp.MicrosoftPhoto.LastKeywordXMP', ['mspaint', 'internet jokes'])
		self.compareUntranslation('Xmp.MicrosoftPhoto.LastKeywordXMP', ['mspaint', 'internet jokes'])
		self.compareTranslation('Exif.Image.Artist', ['xX_KillerZ5_Xx', 'Player: Matt Mcmuscles'])
		self.compareUntranslation('Exif.Image.Artist', ['xX_KillerZ5_Xx', 'Player: Matt Mcmuscles'])
		self.compareTranslation('Xmp.dc.creator', ['xX_KillerZ5_Xx', 'Player: Matt Mcmuscles'])
		self.compareUntranslation('Xmp.dc.creator', ['xX_KillerZ5_Xx', 'Player: Matt Mcmuscles'])
		self.compareTranslation('Exif.Image.Rating', 3)
		self.compareUntranslation('Exif.Image.Rating', 3)
		self.compareTranslation('Xmp.xmp.Rating', 3)
		self.compareUntranslation('Xmp.xmp.Rating', 3)
		self.compareTranslation('Exif.Image.RatingPercent', 3)
		self.compareUntranslation('Exif.Image.RatingPercent', 3)
		self.compareTranslation('Xmp.MicrosoftPhoto.Rating', 3)
		self.compareUntranslation('Xmp.MicrosoftPhoto.Rating', 3)
		self.compareTranslation('Exif.Photo.DateTimeOriginal', datetime.datetime(2019, 1, 18, 18, 32))
		self.compareUntranslation('Exif.Photo.DateTimeOriginal', datetime.datetime(2019, 1, 18, 18, 32))
		self.compareTranslation('Exif.Photo.DateTimeDigitized', datetime.datetime(2019, 1, 18, 18, 32))
		self.compareUntranslation('Exif.Photo.DateTimeDigitized', datetime.datetime(2019, 1, 18, 18, 32))
		self.compareTranslation('Xmp.MicrosoftPhoto.DateAcquired', datetime.datetime(2019, 1, 18, 18, 32))
		self.compareUntranslation('Xmp.MicrosoftPhoto.DateAcquired', datetime.datetime(2019, 1, 18, 18, 32))
		self.compareTranslation('Xmp.xmp.CreateDate', datetime.datetime(2019, 1, 18, 18, 32))
		self.compareUntranslation('Xmp.xmp.CreateDate', datetime.datetime(2019, 1, 18, 18, 32))
		self.compareTranslation('Xmp.dc.Source', 'https//photobucket.com/221443')
		self.compareUntranslation('Xmp.dc.Source', 'https//photobucket.com/221443')
		self.compareTranslation('Xmp.xmp.BaseURL', 'https//photobucket.com/221443')
		self.compareUntranslation('Xmp.xmp.BaseURL', 'https//photobucket.com/221443')
		self.compareTranslation('Xmp.iptcExt.Series.Name', "Sample Series Name")
		self.compareUntranslation('Xmp.iptcExt.Series.Name', "Sample Series Name")
		self.compareTranslation('Xmp.iptcExt.Series.Identifier', 7)
		self.compareUntranslation('Xmp.iptcExt.Series.Identifier', 7)
		self.compareTranslation('Xmp.xmp.MetadataDate', datetime.datetime(2019, 1, 9, 5, 20))
		self.compareUntranslation('Xmp.xmp.MetadataDate', datetime.datetime(2019, 1, 9, 5, 20))
		self.compareTranslation('Xmp.taggerMark.mdEditorName', 'sampleMark')
		self.compareUntranslation('Xmp.taggerMark.mdEditorName', 'sampleMark')
		self.compareTranslation('Xmp.taggerMark.mdEditorVersion', "0.03")
		self.compareUntranslation('Xmp.taggerMark.mdEditorVersion', "0.03")


class ErrorCheck_FileAlteringTests(unittest.TestCase):
	def test_setRatingInputCheck(self):
		releaseAllClones(g_clonenames)
		f_filename = singleClone(g_files["fixingComputer.jpg"].fullname)
		self.assertRaises(MetadataManagerL0.OutOfRangeError, MetadataManagerL0.setRating, f_filename, 6)
		self.assertRaises(MetadataManagerL0.OutOfRangeError, MetadataManagerL0.setRating, f_filename, 0)
		self.assertRaises(MetadataManagerL0.OutOfRangeError, MetadataManagerL0.setRating, f_filename, -1)
		# OutOfRangeError conditions are checked before NotIntegerError conditons
		self.assertRaises(MetadataManagerL0.OutOfRangeError, MetadataManagerL0.setRating, f_filename, 0.1)
		self.assertRaises(MetadataManagerL0.NotIntegerError, MetadataManagerL0.setRating, f_filename, 1.0)
		self.assertRaises(MetadataManagerL0.NotIntegerError, MetadataManagerL0.setRating, f_filename, 1.3)
		self.assertRaises(MetadataManagerL0.NotIntegerError, MetadataManagerL0.setRating, f_filename, 4.9)
		os.remove(f_filename)

	def test_isVersionErrorCheck(self):
		self.assertRaises(MetadataManagerL0.IncorrectVersionFormatError, MetadataManagerL0.isVersionNum, 'three')
		self.assertRaises(MetadataManagerL0.IncorrectVersionFormatError, MetadataManagerL0.isVersionNum, '3')
		self.assertRaises(MetadataManagerL0.IncorrectVersionFormatError, MetadataManagerL0.isVersionNum, '.01')
		self.assertRaises(MetadataManagerL0.IncorrectVersionFormatError, MetadataManagerL0.isVersionNum, '4.9')
		self.assertRaises(MetadataManagerL0.IncorrectVersionFormatError, MetadataManagerL0.isVersionNum, '1.02.32')
		self.assertRaises(MetadataManagerL0.IncorrectVersionFormatError, MetadataManagerL0.isVersionNum, '001')
		self.assertRaises(MetadataManagerL0.IncorrectVersionFormatError, MetadataManagerL0.isVersionNum, '42.01a')
		self.assertRaises(MetadataManagerL0.IncorrectVersionFormatError, MetadataManagerL0.isVersionNum, 'version5')
		self.assertRaises(MetadataManagerL0.IncorrectVersionFormatError, MetadataManagerL0.isVersionNum, 'y.01')

	def test_setVersionInputCheck(self):
		releaseAllClones(g_clonenames)
		f_filename = singleClone(g_files["fixingComputer.jpg"].fullname)
		self.assertRaises(MetadataManagerL0.IncorrectVersionFormatError, MetadataManagerL0.setVersionNum, f_filename, '3')
		self.assertRaises(MetadataManagerL0.IncorrectVersionFormatError, MetadataManagerL0.setVersionNum, f_filename, '.01')
		self.assertRaises(MetadataManagerL0.IncorrectVersionFormatError, MetadataManagerL0.setVersionNum, f_filename, '4.9')
		self.assertRaises(MetadataManagerL0.IncorrectVersionFormatError, MetadataManagerL0.setVersionNum, f_filename, '1.02.32')
		self.assertRaises(MetadataManagerL0.IncorrectVersionFormatError, MetadataManagerL0.setVersionNum, f_filename, '42.01a')
		self.assertRaises(MetadataManagerL0.IncorrectVersionFormatError, MetadataManagerL0.setVersionNum, f_filename, 'version5')
		self.assertRaises(MetadataManagerL0.IncorrectVersionFormatError, MetadataManagerL0.setVersionNum, f_filename, 'y.01')
		os.remove(f_filename)

	def test_setFunctionsKeyCheck(self):
		releaseAllClones(g_clonenames)
		f_filename = singleClone(g_files2['pokefile0'].fullname)
		MetadataManagerL0.setTitle(f_filename, sampleData.getItem("Title"))
		self.assertEqual(True, checkAllKeysPresent(f_filename, "Title"))
		MetadataManagerL0.setDescr(f_filename, sampleData.getItem("Description"))
		self.assertEqual(True, checkAllKeysPresent(f_filename, "Description"))
		MetadataManagerL0.setRating(f_filename, sampleData.getItem("Rating"))
		self.assertEqual(True, checkAllKeysPresent(f_filename, "Rating"))
		MetadataManagerL0.setTags(f_filename, sampleData.getItem("Tags"))
		self.assertEqual(True, checkAllKeysPresent(f_filename, "Tags"))
		MetadataManagerL0.setArtists(f_filename, sampleData.getItem("Artist"))
		self.assertEqual(True, checkAllKeysPresent(f_filename, "Artist"))
		MetadataManagerL0.setOrgDate(f_filename, sampleData.getItem("Date Created"))
		self.assertEqual(True, checkAllKeysPresent(f_filename, "Date Created"))
		MetadataManagerL0.setSource(f_filename, sampleData.getItem("Source"))
		self.assertEqual(True, checkAllKeysPresent(f_filename, "Source"))
		MetadataManagerL0.setSeriesName(f_filename, sampleData.getItem("SeriesName"))
		self.assertEqual(True, checkAllKeysPresent(f_filename, "SeriesName"))
		MetadataManagerL0.setSeriesInstallment(f_filename, sampleData.getItem("SeriesInstallment"))
		self.assertEqual(True, checkAllKeysPresent(f_filename, "SeriesInstallment"))
		#if we get the date object from another file, it messes up for some reason.
		#MetadataManagerL0.setMetadataDate(f_filename, sampleData.getItem("MetadataDate"))
		MetadataManagerL0.setMetadataDate(f_filename, datetime.datetime(2019, 1, 10, 3, 41))
		self.assertEqual(True, checkAllKeysPresent(f_filename, "MetadataDate"))
		MetadataManagerL0.setTaggerMark(f_filename, sampleData.getItem("TaggerMark"))
		self.assertEqual(True, checkAllKeysPresent(f_filename, "TaggerMark"))
		MetadataManagerL0.setVersionNum(f_filename, sampleData.getItem("VersionNum"))
		self.assertEqual(True, checkAllKeysPresent(f_filename, "VersionNum"))
		os.remove(f_filename)
		f_filename = singleClone(g_files2['pokefile1'].fullname)
		MetadataManagerL0.setTitle(f_filename, sampleData.getItem("Title"))
		self.assertEqual(True, checkAllKeysPresent(f_filename, "Title"))
		MetadataManagerL0.setDescr(f_filename, sampleData.getItem("Description"))
		self.assertEqual(True, checkAllKeysPresent(f_filename, "Description"))
		MetadataManagerL0.setRating(f_filename, sampleData.getItem("Rating"))
		self.assertEqual(True, checkAllKeysPresent(f_filename, "Rating"))
		MetadataManagerL0.setTags(f_filename, sampleData.getItem("Tags"))
		self.assertEqual(True, checkAllKeysPresent(f_filename, "Tags"))
		MetadataManagerL0.setArtists(f_filename, sampleData.getItem("Artist"))
		self.assertEqual(True, checkAllKeysPresent(f_filename, "Artist"))
		MetadataManagerL0.setOrgDate(f_filename, sampleData.getItem("Date Created"))
		self.assertEqual(True, checkAllKeysPresent(f_filename, "Date Created"))
		MetadataManagerL0.setSource(f_filename, sampleData.getItem("Source"))
		self.assertEqual(True, checkAllKeysPresent(f_filename, "Source"))
		MetadataManagerL0.setSeriesName(f_filename, sampleData.getItem("SeriesName"))
		self.assertEqual(True, checkAllKeysPresent(f_filename, "SeriesName"))
		MetadataManagerL0.setSeriesInstallment(f_filename, sampleData.getItem("SeriesInstallment"))
		self.assertEqual(True, checkAllKeysPresent(f_filename, "SeriesInstallment"))
		#MetadataManagerL0.setMetadataDate(f_filename, sampleData.getItem("MetadataDate"))
		MetadataManagerL0.setMetadataDate(f_filename, datetime.datetime(2019, 1, 10, 3, 41))
		self.assertEqual(True, checkAllKeysPresent(f_filename, "MetadataDate"))
		MetadataManagerL0.setTaggerMark(f_filename, sampleData.getItem("TaggerMark"))
		self.assertEqual(True, checkAllKeysPresent(f_filename, "TaggerMark"))
		MetadataManagerL0.setVersionNum(f_filename, sampleData.getItem("VersionNum"))
		self.assertEqual(True, checkAllKeysPresent(f_filename, "VersionNum"))
		os.remove(f_filename)
		f_filename = singleClone(g_files2['pokefile7'].fullname)
		MetadataManagerL0.setTitle(f_filename, sampleData.getItem("Title"))
		self.assertEqual(True, checkAllKeysPresent(f_filename, "Title"))
		MetadataManagerL0.setDescr(f_filename, sampleData.getItem("Description"))
		self.assertEqual(True, checkAllKeysPresent(f_filename, "Description"))
		MetadataManagerL0.setRating(f_filename, sampleData.getItem("Rating"))
		self.assertEqual(True, checkAllKeysPresent(f_filename, "Rating"))
		MetadataManagerL0.setTags(f_filename, sampleData.getItem("Tags"))
		self.assertEqual(True, checkAllKeysPresent(f_filename, "Tags"))
		MetadataManagerL0.setArtists(f_filename, sampleData.getItem("Artist"))
		self.assertEqual(True, checkAllKeysPresent(f_filename, "Artist"))
		MetadataManagerL0.setOrgDate(f_filename, sampleData.getItem("Date Created"))
		self.assertEqual(True, checkAllKeysPresent(f_filename, "Date Created"))
		MetadataManagerL0.setSource(f_filename, sampleData.getItem("Source"))
		self.assertEqual(True, checkAllKeysPresent(f_filename, "Source"))
		MetadataManagerL0.setSeriesName(f_filename, sampleData.getItem("SeriesName"))
		self.assertEqual(True, checkAllKeysPresent(f_filename, "SeriesName"))
		MetadataManagerL0.setSeriesInstallment(f_filename, sampleData.getItem("SeriesInstallment"))
		self.assertEqual(True, checkAllKeysPresent(f_filename, "SeriesInstallment"))
		#MetadataManagerL0.setMetadataDate(f_filename, sampleData.getItem("MetadataDate"))
		MetadataManagerL0.setMetadataDate(f_filename, datetime.datetime(2019, 1, 10, 3, 41))
		self.assertEqual(True, checkAllKeysPresent(f_filename, "MetadataDate"))
		MetadataManagerL0.setTaggerMark(f_filename, sampleData.getItem("TaggerMark"))
		self.assertEqual(True, checkAllKeysPresent(f_filename, "TaggerMark"))
		MetadataManagerL0.setVersionNum(f_filename, sampleData.getItem("VersionNum"))
		self.assertEqual(True, checkAllKeysPresent(f_filename, "VersionNum"))
		os.remove(f_filename)
		pass

	def test_wipeFunctionsKeyCheck(self):
		releaseAllClones(g_clonenames)
		f_filename = singleClone(g_files2['pokefile0'].fullname)
		MetadataManagerL0.setTitle(f_filename, sampleData.getItem("Title"))
		MetadataManagerL0.wipeTitle(f_filename)
		self.assertEqual(False, checkAnyKeysPresent(f_filename, "Title"))
		MetadataManagerL0.setDescr(f_filename, sampleData.getItem("Description"))
		MetadataManagerL0.wipeDescr(f_filename)
		self.assertEqual(False, checkAnyKeysPresent(f_filename, "Description"))
		MetadataManagerL0.setRating(f_filename, sampleData.getItem("Rating"))
		MetadataManagerL0.wipeRating(f_filename)
		self.assertEqual(False, checkAnyKeysPresent(f_filename, "Rating"))
		MetadataManagerL0.setTags(f_filename, sampleData.getItem("Tags"))
		MetadataManagerL0.wipeTags(f_filename)
		self.assertEqual(False, checkAnyKeysPresent(f_filename, "Tags"))
		MetadataManagerL0.setArtists(f_filename, sampleData.getItem("Artist"))
		MetadataManagerL0.wipeArtists(f_filename)
		self.assertEqual(False, checkAnyKeysPresent(f_filename, "Artist"))
		MetadataManagerL0.setSource(f_filename, sampleData.getItem("Source"))
		MetadataManagerL0.wipeSource(f_filename)
		self.assertEqual(False, checkAnyKeysPresent(f_filename, "Source"))
		MetadataManagerL0.setSeriesName(f_filename, sampleData.getItem("SeriesName"))
		MetadataManagerL0.wipeSeriesName(f_filename)
		self.assertEqual(False, checkAnyKeysPresent(f_filename, "SeriesName"))
		MetadataManagerL0.setSeriesInstallment(f_filename, sampleData.getItem("SeriesInstallment"))
		MetadataManagerL0.wipeSeriesInstallment(f_filename)
		self.assertEqual(False, checkAnyKeysPresent(f_filename, "SeriesInstallment"))
		os.remove(f_filename)
		f_filename = singleClone(g_files2['pokefile1'].fullname)
		MetadataManagerL0.setTitle(f_filename, sampleData.getItem("Title"))
		MetadataManagerL0.wipeTitle(f_filename)
		self.assertEqual(False, checkAnyKeysPresent(f_filename, "Title"))
		MetadataManagerL0.setDescr(f_filename, sampleData.getItem("Description"))
		MetadataManagerL0.wipeDescr(f_filename)
		self.assertEqual(False, checkAnyKeysPresent(f_filename, "Description"))
		MetadataManagerL0.setRating(f_filename, sampleData.getItem("Rating"))
		MetadataManagerL0.wipeRating(f_filename)
		self.assertEqual(False, checkAnyKeysPresent(f_filename, "Rating"))
		MetadataManagerL0.setTags(f_filename, sampleData.getItem("Tags"))
		MetadataManagerL0.wipeTags(f_filename)
		self.assertEqual(False, checkAnyKeysPresent(f_filename, "Tags"))
		MetadataManagerL0.setArtists(f_filename, sampleData.getItem("Artist"))
		MetadataManagerL0.wipeArtists(f_filename)
		self.assertEqual(False, checkAnyKeysPresent(f_filename, "Artist"))
		MetadataManagerL0.setSource(f_filename, sampleData.getItem("Source"))
		MetadataManagerL0.wipeSource(f_filename)
		self.assertEqual(False, checkAnyKeysPresent(f_filename, "Source"))
		MetadataManagerL0.setSeriesName(f_filename, sampleData.getItem("SeriesName"))
		MetadataManagerL0.wipeSeriesName(f_filename)
		self.assertEqual(False, checkAnyKeysPresent(f_filename, "SeriesName"))
		MetadataManagerL0.setSeriesInstallment(f_filename, sampleData.getItem("SeriesInstallment"))
		MetadataManagerL0.wipeSeriesInstallment(f_filename)
		self.assertEqual(False, checkAnyKeysPresent(f_filename, "SeriesInstallment"))
		os.remove(f_filename)
		f_filename = singleClone(g_files2['pokefile2'].fullname)
		MetadataManagerL0.setTitle(f_filename, sampleData.getItem("Title"))
		MetadataManagerL0.wipeTitle(f_filename)
		self.assertEqual(False, checkAnyKeysPresent(f_filename, "Title"))
		MetadataManagerL0.setDescr(f_filename, sampleData.getItem("Description"))
		MetadataManagerL0.wipeDescr(f_filename)
		self.assertEqual(False, checkAnyKeysPresent(f_filename, "Description"))
		MetadataManagerL0.setRating(f_filename, sampleData.getItem("Rating"))
		MetadataManagerL0.wipeRating(f_filename)
		self.assertEqual(False, checkAnyKeysPresent(f_filename, "Rating"))
		MetadataManagerL0.setTags(f_filename, sampleData.getItem("Tags"))
		MetadataManagerL0.wipeTags(f_filename)
		self.assertEqual(False, checkAnyKeysPresent(f_filename, "Tags"))
		MetadataManagerL0.setArtists(f_filename, sampleData.getItem("Artist"))
		MetadataManagerL0.wipeArtists(f_filename)
		self.assertEqual(False, checkAnyKeysPresent(f_filename, "Artist"))
		MetadataManagerL0.setSource(f_filename, sampleData.getItem("Source"))
		MetadataManagerL0.wipeSource(f_filename)
		self.assertEqual(False, checkAnyKeysPresent(f_filename, "Source"))
		MetadataManagerL0.setSeriesName(f_filename, sampleData.getItem("SeriesName"))
		MetadataManagerL0.wipeSeriesName(f_filename)
		self.assertEqual(False, checkAnyKeysPresent(f_filename, "SeriesName"))
		MetadataManagerL0.setSeriesInstallment(f_filename, sampleData.getItem("SeriesInstallment"))
		MetadataManagerL0.wipeSeriesInstallment(f_filename)
		self.assertEqual(False, checkAnyKeysPresent(f_filename, "SeriesInstallment"))
		os.remove(f_filename)
		pass

class ErrorCheck_DelicateTests(unittest.TestCase):
	def test_metadataMissingW(self):
		releaseAllClones(g_clonenames)
		"""Hopefully none of these tests actually alter the files"""
		f_filename = singleClone(g_files["rippledotzero.jpg"].fullname)
		self.assertRaises(MetadataManagerL0.MetadataMissingError, MetadataManagerL0.wipeTitle, f_filename)
		self.assertRaises(MetadataManagerL0.MetadataMissingError, MetadataManagerL0.wipeDescr, f_filename)
		self.assertRaises(MetadataManagerL0.MetadataMissingError, MetadataManagerL0.wipeArtists, f_filename)
		self.assertRaises(MetadataManagerL0.MetadataMissingError, MetadataManagerL0.wipeTags, f_filename)
		self.assertRaises(MetadataManagerL0.MetadataMissingError, MetadataManagerL0.wipeRating, f_filename)
		self.assertRaises(MetadataManagerL0.MetadataMissingError, MetadataManagerL0.wipeSource, f_filename)
		self.assertRaises(MetadataManagerL0.MetadataMissingError, MetadataManagerL0.wipeSeriesName, f_filename)
		self.assertRaises(MetadataManagerL0.MetadataMissingError, MetadataManagerL0.wipeSeriesInstallment, f_filename)
		os.remove(f_filename)

class ResultsCheck_DelicateTests(unittest.TestCase):
	def test_metadataResults(self):
		releaseAllClones(g_clonenames)
		f_filename = singleClone(g_files["fixingComputer.jpg"].fullname)
		self.assertEqual(True, MetadataManagerL0.containsTitle(f_filename))
		self.assertEqual("crazy man fixing computer", MetadataManagerL0.getTitle(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsArtists(f_filename))
		self.assertEqual(["stockphotographer", "publisher: twitter"], MetadataManagerL0.getArtists(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsTags(f_filename))
		self.assertEqual(["stock photo", "funny", "bad stock photos of my job", "technology"], MetadataManagerL0.getTags(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsDescr(f_filename))
		self.assertEqual("Bad stock photo of my job found on twitter.", MetadataManagerL0.getDescr(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsRating(f_filename))
		self.assertEqual(2, MetadataManagerL0.getRating(f_filename))
		self.assertEqual(False, MetadataManagerL0.containsSource(f_filename))
		self.assertEqual("", MetadataManagerL0.getSource(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsOrgDate(f_filename))
		#self.assertEqual(datetime.datetime(2017, 12, 11, 21, 51, 28), MetadataManagerL0.getOrgDate(f_filename))
		self.assertEqual('2017-12-11 21:51:28', str(MetadataManagerL0.getOrgDate(f_filename)))
		os.remove(f_filename)

		f_filename = singleClone(g_files["catScreamPizza.jpg"].fullname)
		self.assertEqual(True, MetadataManagerL0.containsTitle(f_filename))
		self.assertEqual("cat", MetadataManagerL0.getTitle(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsArtists(f_filename))
		self.assertEqual(["photographer: idunno"], MetadataManagerL0.getArtists(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsTags(f_filename))
		self.assertEqual(["cat"], MetadataManagerL0.getTags(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsDescr(f_filename))
		self.assertEqual("a cat screaming at the camera in front of a dog wearing a pizza box", MetadataManagerL0.getDescr(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsRating(f_filename))
		self.assertEqual(4, MetadataManagerL0.getRating(f_filename))
		self.assertEqual(False, MetadataManagerL0.containsSource(f_filename))
		self.assertEqual("", MetadataManagerL0.getSource(f_filename))
		self.assertEqual(False, MetadataManagerL0.containsOrgDate(f_filename))
		#self.assertEqual(datetime.datetime(1, 1, 1), MetadataManagerL0.getOrgDate(f_filename))
		self.assertEqual('0001-01-01 00:00:00', str(MetadataManagerL0.getOrgDate(f_filename)))
		os.remove(f_filename)
		f_filename = singleClone(g_files["rippledotzero.jpg"].fullname)
		self.assertEqual(False, MetadataManagerL0.containsTitle(f_filename))
		self.assertEqual("", MetadataManagerL0.getTitle(f_filename))
		self.assertEqual(False, MetadataManagerL0.containsArtists(f_filename))
		self.assertEqual([], MetadataManagerL0.getArtists(f_filename))
		self.assertEqual(False, MetadataManagerL0.containsTags(f_filename))
		self.assertEqual([], MetadataManagerL0.getTags(f_filename))
		self.assertEqual(False, MetadataManagerL0.containsDescr(f_filename))
		self.assertEqual("", MetadataManagerL0.getDescr(f_filename))
		self.assertEqual(False, MetadataManagerL0.containsRating(f_filename))
		self.assertEqual(-1, MetadataManagerL0.getRating(f_filename))
		self.assertEqual(False, MetadataManagerL0.containsSource(f_filename))
		self.assertEqual("", MetadataManagerL0.getSource(f_filename))
		self.assertEqual(False, MetadataManagerL0.containsOrgDate(f_filename))
		#self.assertEqual(datetime.datetime(1, 1, 1), MetadataManagerL0.getOrgDate(f_filename))
		self.assertEqual('0001-01-01 00:00:00', str(MetadataManagerL0.getOrgDate(f_filename)))
		os.remove(f_filename)
		f_filename = singleClone(g_files2['pokefile0'].fullname)
		self.assertEqual(True, MetadataManagerL0.containsTitle(f_filename))
		self.assertEqual("Best Gift", MetadataManagerL0.getTitle(f_filename))
		self.assertEqual(False, MetadataManagerL0.containsDescr(f_filename))
		self.assertEqual("", MetadataManagerL0.getDescr(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsRating(f_filename))
		self.assertEqual(3, MetadataManagerL0.getRating(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsTags(f_filename))
		self.assertEqual(['socks', 'famous'], MetadataManagerL0.getTags(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsArtists(f_filename))
		self.assertEqual(['Actor: Danny Devito'], MetadataManagerL0.getArtists(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsOrgDate(f_filename))
		#self.assertEqual(datetime.datetime(2017, 7, 20, 11, 32), MetadataManagerL0.getOrgDate(f_filename))
		self.assertEqual('2017-07-20 11:32:00', str(MetadataManagerL0.getOrgDate(f_filename)))
		self.assertEqual(False, MetadataManagerL0.containsSource(f_filename))
		self.assertEqual("", MetadataManagerL0.getSource(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsSeriesName(f_filename))
		self.assertEqual('surprise party 2017', MetadataManagerL0.getSeriesName(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsSeriesInstallment(f_filename))
		self.assertEqual(11, MetadataManagerL0.getSeriesInstallment(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsMetadataDate(f_filename))
		#self.assertEqual(datetime.datetime(2019, 1, 9, 5, 20), MetadataManagerL0.getMetadataDate(f_filename))
		self.assertEqual('2019-01-09 05:20:00+00:00', str(MetadataManagerL0.getMetadataDate(f_filename)))
		self.assertEqual(True, MetadataManagerL0.containsTaggerMark(f_filename))
		self.assertEqual('taggerMark', MetadataManagerL0.getTaggerMark(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsVersionNum(f_filename))
		self.assertEqual("0.03", MetadataManagerL0.getVersionNum(f_filename))
		os.remove(f_filename)
		f_filename = singleClone(g_files2['pokefile1'].fullname)
		self.assertEqual(True, MetadataManagerL0.containsTitle(f_filename))
		self.assertEqual("Everyone party", MetadataManagerL0.getTitle(f_filename))
		self.assertEqual(False, MetadataManagerL0.containsDescr(f_filename))
		self.assertEqual("", MetadataManagerL0.getDescr(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsRating(f_filename))
		self.assertEqual(2, MetadataManagerL0.getRating(f_filename))
		self.assertEqual(False, MetadataManagerL0.containsTags(f_filename))
		self.assertEqual([], MetadataManagerL0.getTags(f_filename))
		self.assertEqual(False, MetadataManagerL0.containsArtists(f_filename))
		self.assertEqual([], MetadataManagerL0.getArtists(f_filename))
		self.assertEqual(False, MetadataManagerL0.containsOrgDate(f_filename))
		#self.assertEqual(datetime.datetime(1, 1, 1), MetadataManagerL0.getOrgDate(f_filename))
		self.assertEqual('0001-01-01 00:00:00', str(MetadataManagerL0.getOrgDate(f_filename)))
		self.assertEqual(False, MetadataManagerL0.containsSource(f_filename))
		self.assertEqual("", MetadataManagerL0.getSource(f_filename))
		self.assertEqual(False, MetadataManagerL0.containsSeriesName(f_filename))
		self.assertEqual("", MetadataManagerL0.getSeriesName(f_filename))
		self.assertEqual(False, MetadataManagerL0.containsSeriesInstallment(f_filename))
		self.assertEqual(-1, MetadataManagerL0.getSeriesInstallment(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsMetadataDate(f_filename))
		#self.assertEqual(datetime.datetime(2019, 1, 9, 5, 24), MetadataManagerL0.getMetadataDate(f_filename))
		self.assertEqual('2019-01-09 05:24:00+00:00', str(MetadataManagerL0.getMetadataDate(f_filename)))
		self.assertEqual(True, MetadataManagerL0.containsTaggerMark(f_filename))
		self.assertEqual('taggerMark', MetadataManagerL0.getTaggerMark(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsVersionNum(f_filename))
		self.assertEqual("0.10", MetadataManagerL0.getVersionNum(f_filename))
		os.remove(f_filename)
		f_filename = singleClone(g_files2['pokefile2'].fullname)
		self.assertEqual(False, MetadataManagerL0.containsTitle(f_filename))
		self.assertEqual("", MetadataManagerL0.getTitle(f_filename))
		self.assertEqual(False, MetadataManagerL0.containsDescr(f_filename))
		self.assertEqual("", MetadataManagerL0.getDescr(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsRating(f_filename))
		self.assertEqual(2, MetadataManagerL0.getRating(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsTags(f_filename))
		self.assertEqual(['mspaint', 'internet jokes'], MetadataManagerL0.getTags(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsArtists(f_filename))
		self.assertEqual(['anonymous'], MetadataManagerL0.getArtists(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsOrgDate(f_filename))
		#self.assertEqual(datetime.datetime(2011, 3, 5), MetadataManagerL0.getOrgDate(f_filename))
		self.assertEqual('2011-03-05 00:00:00', str(MetadataManagerL0.getOrgDate(f_filename)))
		self.assertEqual(False, MetadataManagerL0.containsSource(f_filename))
		self.assertEqual("", MetadataManagerL0.getSource(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsSeriesName(f_filename))
		self.assertEqual('funnydumbo', MetadataManagerL0.getSeriesName(f_filename))
		self.assertEqual(False, MetadataManagerL0.containsSeriesInstallment(f_filename))
		self.assertEqual(-1, MetadataManagerL0.getSeriesInstallment(f_filename))
		self.assertEqual(False, MetadataManagerL0.containsMetadataDate(f_filename))
		#self.assertEqual(datetime.datetime(1, 1, 1), MetadataManagerL0.getMetadataDate(f_filename))
		self.assertEqual('0001-01-01 00:00:00', str(MetadataManagerL0.getMetadataDate(f_filename)))
		self.assertEqual(False, MetadataManagerL0.containsTaggerMark(f_filename))
		self.assertEqual("", MetadataManagerL0.getTaggerMark(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsVersionNum(f_filename))
		self.assertEqual("1.03", MetadataManagerL0.getVersionNum(f_filename))
		os.remove(f_filename)
		f_filename = singleClone(g_files2['pokefile3'].fullname)
		self.assertEqual(True, MetadataManagerL0.containsTitle(f_filename))
		self.assertEqual('Fancy video game fanart', MetadataManagerL0.getTitle(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsDescr(f_filename))
		self.assertEqual('It\'s super vampire gungirl holding a giant knife. Very stylish', MetadataManagerL0.getDescr(f_filename))
		self.assertEqual(False, MetadataManagerL0.containsRating(f_filename))
		self.assertEqual(-1, MetadataManagerL0.getRating(f_filename))
		self.assertEqual(False, MetadataManagerL0.containsTags(f_filename))
		self.assertEqual([], MetadataManagerL0.getTags(f_filename))
		self.assertEqual(False, MetadataManagerL0.containsArtists(f_filename))
		self.assertEqual([], MetadataManagerL0.getArtists(f_filename))
		self.assertEqual(False, MetadataManagerL0.containsOrgDate(f_filename))
		#self.assertEqual(datetime.datetime(1, 1, 1), MetadataManagerL0.getOrgDate(f_filename))
		self.assertEqual('0001-01-01 00:00:00', str(MetadataManagerL0.getOrgDate(f_filename)))
		self.assertEqual(False, MetadataManagerL0.containsSource(f_filename))
		self.assertEqual("", MetadataManagerL0.getSource(f_filename))
		self.assertEqual(False, MetadataManagerL0.containsSeriesName(f_filename))
		self.assertEqual("", MetadataManagerL0.getSeriesName(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsSeriesInstallment(f_filename))
		self.assertEqual(3, MetadataManagerL0.getSeriesInstallment(f_filename))
		self.assertEqual(False, MetadataManagerL0.containsMetadataDate(f_filename))
		#self.assertEqual(datetime.datetime(1, 1, 1), MetadataManagerL0.getMetadataDate(f_filename))
		self.assertEqual('0001-01-01 00:00:00', str(MetadataManagerL0.getMetadataDate(f_filename)))
		self.assertEqual(True, MetadataManagerL0.containsTaggerMark(f_filename))
		self.assertEqual('taggerMark', MetadataManagerL0.getTaggerMark(f_filename))
		self.assertEqual(False, MetadataManagerL0.containsVersionNum(f_filename))
		self.assertEqual("-1", MetadataManagerL0.getVersionNum(f_filename))
		os.remove(f_filename)
		f_filename = singleClone(g_files2['pokefile4'].fullname)
		self.assertEqual(False, MetadataManagerL0.containsTitle(f_filename))
		self.assertEqual("", MetadataManagerL0.getTitle(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsDescr(f_filename))
		self.assertEqual('screenshot from a great letsplay', MetadataManagerL0.getDescr(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsRating(f_filename))
		self.assertEqual(1, MetadataManagerL0.getRating(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsTags(f_filename))
		self.assertEqual(['screenshot'], MetadataManagerL0.getTags(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsArtists(f_filename))
		self.assertEqual(['xX_KillerZ5_Xx', 'Player: Matt Mcmuscles'], MetadataManagerL0.getArtists(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsOrgDate(f_filename))
		#self.assertEqual(datetime.datetime(2019, 1, 9, 5, 20), MetadataManagerL0.getOrgDate(f_filename))
		self.assertEqual('2019-01-09 05:20:00', str(MetadataManagerL0.getOrgDate(f_filename)))
		self.assertEqual(True, MetadataManagerL0.containsSource(f_filename))
		self.assertEqual('https//youtube.com/333243/', MetadataManagerL0.getSource(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsSeriesName(f_filename))
		self.assertEqual('deadfart super friend spark scene', MetadataManagerL0.getSeriesName(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsSeriesInstallment(f_filename))
		self.assertEqual(4, MetadataManagerL0.getSeriesInstallment(f_filename))
		self.assertEqual(False, MetadataManagerL0.containsMetadataDate(f_filename))
		#self.assertEqual(datetime.datetime(1, 1, 1), MetadataManagerL0.getMetadataDate(f_filename))
		self.assertEqual('0001-01-01 00:00:00', str(MetadataManagerL0.getMetadataDate(f_filename)))
		self.assertEqual(True, MetadataManagerL0.containsTaggerMark(f_filename))
		self.assertEqual('taggerMark', MetadataManagerL0.getTaggerMark(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsVersionNum(f_filename))
		self.assertEqual("1.03", MetadataManagerL0.getVersionNum(f_filename))
		os.remove(f_filename)
		f_filename = singleClone(g_files2['pokefile5'].fullname)
		self.assertEqual(False, MetadataManagerL0.containsTitle(f_filename))
		self.assertEqual("", MetadataManagerL0.getTitle(f_filename))
		self.assertEqual(False, MetadataManagerL0.containsDescr(f_filename))
		self.assertEqual("", MetadataManagerL0.getDescr(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsRating(f_filename))
		self.assertEqual(4, MetadataManagerL0.getRating(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsTags(f_filename))
		self.assertEqual(['internet jokes'], MetadataManagerL0.getTags(f_filename))
		self.assertEqual(False, MetadataManagerL0.containsArtists(f_filename))
		self.assertEqual([], MetadataManagerL0.getArtists(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsOrgDate(f_filename))
		#self.assertEqual(datetime.datetime(2009, 8, 1), MetadataManagerL0.getOrgDate(f_filename))
		self.assertEqual('2009-08-01 00:00:00', str(MetadataManagerL0.getOrgDate(f_filename)))
		self.assertEqual(False, MetadataManagerL0.containsSource(f_filename))
		self.assertEqual("", MetadataManagerL0.getSource(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsSeriesName(f_filename))
		self.assertEqual('dog fart collection', MetadataManagerL0.getSeriesName(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsSeriesInstallment(f_filename))
		self.assertEqual(8, MetadataManagerL0.getSeriesInstallment(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsMetadataDate(f_filename))
		#self.assertEqual(datetime.datetime(2019, 1, 9, 6, 15), MetadataManagerL0.getMetadataDate(f_filename))
		self.assertEqual('2019-01-09 06:15:00+00:00', str(MetadataManagerL0.getMetadataDate(f_filename)))
		self.assertEqual(False, MetadataManagerL0.containsTaggerMark(f_filename))
		self.assertEqual("", MetadataManagerL0.getTaggerMark(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsVersionNum(f_filename))
		self.assertEqual("1.03", MetadataManagerL0.getVersionNum(f_filename))
		os.remove(f_filename)
		f_filename = singleClone(g_files2['pokefile6'].fullname)
		self.assertEqual(True, MetadataManagerL0.containsTitle(f_filename))
		self.assertEqual('bullet wave', MetadataManagerL0.getTitle(f_filename))
		self.assertEqual(False, MetadataManagerL0.containsDescr(f_filename))
		self.assertEqual("", MetadataManagerL0.getDescr(f_filename))
		self.assertEqual(False, MetadataManagerL0.containsRating(f_filename))
		self.assertEqual(-1, MetadataManagerL0.getRating(f_filename))
		self.assertEqual(False, MetadataManagerL0.containsTags(f_filename))
		self.assertEqual([], MetadataManagerL0.getTags(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsArtists(f_filename))
		self.assertEqual(['lineart: angelWood', 'character: DarkDork45'], MetadataManagerL0.getArtists(f_filename))
		self.assertEqual(False, MetadataManagerL0.containsOrgDate(f_filename))
		#self.assertEqual(datetime.datetime(1, 1, 1), MetadataManagerL0.getOrgDate(f_filename))
		self.assertEqual('0001-01-01 00:00:00', str(MetadataManagerL0.getOrgDate(f_filename)))
		self.assertEqual(False, MetadataManagerL0.containsSource(f_filename))
		self.assertEqual("", MetadataManagerL0.getSource(f_filename))
		self.assertEqual(False, MetadataManagerL0.containsSeriesName(f_filename))
		self.assertEqual("", MetadataManagerL0.getSeriesName(f_filename))
		self.assertEqual(False, MetadataManagerL0.containsSeriesInstallment(f_filename))
		self.assertEqual(-1, MetadataManagerL0.getSeriesInstallment(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsMetadataDate(f_filename))
		#self.assertEqual(datetime.datetime(2019, 1, 10, 2, 9), MetadataManagerL0.getMetadataDate(f_filename))
		self.assertEqual('2019-01-10 02:09:00+00:00', str(MetadataManagerL0.getMetadataDate(f_filename)))
		self.assertEqual(True, MetadataManagerL0.containsTaggerMark(f_filename))
		self.assertEqual('taggerMark', MetadataManagerL0.getTaggerMark(f_filename))
		self.assertEqual(False, MetadataManagerL0.containsVersionNum(f_filename))
		self.assertEqual("-1", MetadataManagerL0.getVersionNum(f_filename))
		os.remove(f_filename)
		f_filename = singleClone(g_files2['pokefile7'].fullname)
		self.assertEqual(False, MetadataManagerL0.containsTitle(f_filename))
		self.assertEqual("", MetadataManagerL0.getTitle(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsDescr(f_filename))
		self.assertEqual('This is a picture of famous man.\n\mIt was really cool meeting him.\nYolo', MetadataManagerL0.getDescr(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsRating(f_filename))
		self.assertEqual(5, MetadataManagerL0.getRating(f_filename))
		self.assertEqual(False, MetadataManagerL0.containsTags(f_filename))
		self.assertEqual([], MetadataManagerL0.getTags(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsArtists(f_filename))
		self.assertEqual(['Dr.Mc.DrD..E'], MetadataManagerL0.getArtists(f_filename))
		self.assertEqual(False, MetadataManagerL0.containsOrgDate(f_filename))
		#self.assertEqual(datetime.datetime(1, 1, 1), MetadataManagerL0.getOrgDate(f_filename))
		self.assertEqual('0001-01-01 00:00:00', str(MetadataManagerL0.getOrgDate(f_filename)))
		self.assertEqual(True, MetadataManagerL0.containsSource(f_filename))
		self.assertEqual('https//photobucket.com/221443', MetadataManagerL0.getSource(f_filename))
		self.assertEqual(False, MetadataManagerL0.containsSeriesName(f_filename))
		self.assertEqual("", MetadataManagerL0.getSeriesName(f_filename))
		self.assertEqual(False, MetadataManagerL0.containsSeriesInstallment(f_filename))
		self.assertEqual(-1, MetadataManagerL0.getSeriesInstallment(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsMetadataDate(f_filename))
		#self.assertEqual(datetime.datetime(2019, 1, 10, 2, 20), MetadataManagerL0.getMetadataDate(f_filename))
		self.assertEqual('2019-01-10 02:20:00+00:00', str(MetadataManagerL0.getMetadataDate(f_filename)))
		self.assertEqual(True, MetadataManagerL0.containsTaggerMark(f_filename))
		self.assertEqual('taggerMark', MetadataManagerL0.getTaggerMark(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsVersionNum(f_filename))
		self.assertEqual("1.05", MetadataManagerL0.getVersionNum(f_filename))
		os.remove(f_filename)
		f_filename = singleClone(g_files2['pokefile8'].fullname)
		self.assertEqual(True, MetadataManagerL0.containsTitle(f_filename))
		self.assertEqual('weird cat drawing', MetadataManagerL0.getTitle(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsDescr(f_filename))
		self.assertEqual('Some fast drawing of a weird cat. It\'s staring at a pizza like it wants to sit on it. I found this online a long time ago.', MetadataManagerL0.getDescr(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsRating(f_filename))
		self.assertEqual(1, MetadataManagerL0.getRating(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsTags(f_filename))
		self.assertEqual(['drawing', 'cat', 'mspaint'], MetadataManagerL0.getTags(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsArtists(f_filename))
		self.assertEqual(['9566215387126'], MetadataManagerL0.getArtists(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsOrgDate(f_filename))
		#self.assertEqual(datetime.datetime(2019, 1, 18, 18, 32), MetadataManagerL0.getOrgDate(f_filename))
		self.assertEqual('2019-01-18 18:32:00', str(MetadataManagerL0.getOrgDate(f_filename)))
		self.assertEqual(True, MetadataManagerL0.containsSource(f_filename))
		self.assertEqual('tinyu.rl/1jv345', MetadataManagerL0.getSource(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsSeriesName(f_filename))
		self.assertEqual('cat pizza meme', MetadataManagerL0.getSeriesName(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsSeriesInstallment(f_filename))
		self.assertEqual(2, MetadataManagerL0.getSeriesInstallment(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsMetadataDate(f_filename))
		#self.assertEqual(datetime.datetime(2019, 1, 10, 3, 41), MetadataManagerL0.getMetadataDate(f_filename))
		self.assertEqual('2019-01-10 03:41:00+00:00', str(MetadataManagerL0.getMetadataDate(f_filename)))
		self.assertEqual(True, MetadataManagerL0.containsTaggerMark(f_filename))
		self.assertEqual('taggerMark', MetadataManagerL0.getTaggerMark(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsVersionNum(f_filename))
		self.assertEqual("1.03", MetadataManagerL0.getVersionNum(f_filename))
		os.remove(f_filename)
		f_filename = singleClone(g_files2['pokefile9'].fullname)
		self.assertEqual(False, MetadataManagerL0.containsTitle(f_filename))
		self.assertEqual("", MetadataManagerL0.getTitle(f_filename))
		self.assertEqual(False, MetadataManagerL0.containsDescr(f_filename))
		self.assertEqual("", MetadataManagerL0.getDescr(f_filename))
		self.assertEqual(False, MetadataManagerL0.containsRating(f_filename))
		self.assertEqual(-1, MetadataManagerL0.getRating(f_filename))
		self.assertEqual(False, MetadataManagerL0.containsTags(f_filename))
		self.assertEqual([], MetadataManagerL0.getTags(f_filename))
		self.assertEqual(False, MetadataManagerL0.containsArtists(f_filename))
		self.assertEqual([], MetadataManagerL0.getArtists(f_filename))
		self.assertEqual(False, MetadataManagerL0.containsOrgDate(f_filename))
		#self.assertEqual(datetime.datetime(1, 1, 1), MetadataManagerL0.getOrgDate(f_filename))
		self.assertEqual('0001-01-01 00:00:00', str(MetadataManagerL0.getOrgDate(f_filename)))
		self.assertEqual(False, MetadataManagerL0.containsSource(f_filename))
		self.assertEqual("", MetadataManagerL0.getSource(f_filename))
		self.assertEqual(False, MetadataManagerL0.containsSeriesName(f_filename))
		self.assertEqual("", MetadataManagerL0.getSeriesName(f_filename))
		self.assertEqual(False, MetadataManagerL0.containsSeriesInstallment(f_filename))
		self.assertEqual(-1, MetadataManagerL0.getSeriesInstallment(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsMetadataDate(f_filename))
		#self.assertEqual(datetime.datetime(2019, 1, 9, 5, 20), MetadataManagerL0.getMetadataDate(f_filename))
		self.assertEqual('2019-01-09 05:20:00+00:00', str(MetadataManagerL0.getMetadataDate(f_filename)))
		self.assertEqual(True, MetadataManagerL0.containsTaggerMark(f_filename))
		self.assertEqual('taggerMark', MetadataManagerL0.getTaggerMark(f_filename))
		self.assertEqual(True, MetadataManagerL0.containsVersionNum(f_filename))
		self.assertEqual("0.50", MetadataManagerL0.getVersionNum(f_filename))
		os.remove(f_filename)


class ResultsCheck_FileAlteringTests(unittest.TestCase):
	def test_setTitleResults(self):
		releaseAllClones(g_clonenames)
		f_filename = singleClone(g_files["fixingComputer.jpg"].fullname)
		f_value = "I found the problem"
		MetadataManagerL0.setTitle(f_filename, f_value)
		self.assertEqual(f_value, MetadataManagerL0.getTitle(f_filename))
		os.remove(f_filename)
		f_filename = singleClone(g_files["catScreamPizza.jpg"].fullname)
		f_value = "He ate the pizza man"
		MetadataManagerL0.setTitle(f_filename, f_value)
		self.assertEqual(f_value, MetadataManagerL0.getTitle(f_filename))
		os.remove(f_filename)
		f_value = "video game cover"
		f_filename = singleClone(g_files["rippledotzero.jpg"].fullname)
		MetadataManagerL0.setTitle(f_filename, f_value)
		self.assertEqual(f_value, MetadataManagerL0.getTitle(f_filename))
		os.remove(f_filename)

	def test_wipeTitleResults(self):
		releaseAllClones(g_clonenames)
		f_filename = singleClone(g_files["fixingComputer.jpg"].fullname)
		MetadataManagerL0.wipeTitle(f_filename)
		self.assertEqual(False, MetadataManagerL0.containsTitle(f_filename))
		os.remove(f_filename)
		f_filename = singleClone(g_files["catScreamPizza.jpg"].fullname)
		MetadataManagerL0.wipeTitle(f_filename)
		self.assertEqual(False, MetadataManagerL0.containsTitle(f_filename))
		os.remove(f_filename)

	def test_setArtistsResults(self):
		releaseAllClones(g_clonenames)
		f_value = ["twitter"]
		f_filename = singleClone(g_files["fixingComputer.jpg"].fullname)
		MetadataManagerL0.setArtists(f_filename, f_value)
		self.assertEqual(f_value, MetadataManagerL0.getArtists(f_filename))
		os.remove(f_filename)
		f_value = ["Phil"]
		f_filename = singleClone(g_files["catScreamPizza.jpg"].fullname)
		MetadataManagerL0.setArtists(f_filename, f_value)
		self.assertEqual(f_value, MetadataManagerL0.getArtists(f_filename))
		os.remove(f_filename)
		f_value = ["penguindude", "Artist: Simon Stalenhag"]
		f_filename = singleClone(g_files["rippledotzero.jpg"].fullname)
		MetadataManagerL0.setArtists(f_filename, f_value)
		self.assertEqual(f_value, MetadataManagerL0.getArtists(f_filename))
		os.remove(f_filename)

	def test_setTagsResults(self):
		releaseAllClones(g_clonenames)
		f_value = ["stock photo", "funny", "bad stock photos of my job", "technology"]
		f_filename = singleClone(g_files["fixingComputer.jpg"].fullname)
		MetadataManagerL0.setTags(f_filename, f_value)
		self.assertEqual(f_value, MetadataManagerL0.getTags(f_filename))
		os.remove(f_filename)
		f_value = ["funny", "cat", "dog", "dog wearing pizza box", "screaming"]
		f_filename = singleClone(g_files["catScreamPizza.jpg"].fullname)
		MetadataManagerL0.setTags(f_filename, f_value)
		self.assertEqual(f_value, MetadataManagerL0.getTags(f_filename))
		os.remove(f_filename)
		f_value = ["video games", "penguin", "browser games", "rippledotzero", "cover art"]
		f_filename = singleClone(g_files["rippledotzero.jpg"].fullname)
		MetadataManagerL0.setTags(f_filename, f_value)
		self.assertEqual(f_value, MetadataManagerL0.getTags(f_filename))
		os.remove(f_filename)

	def test_setDescrResults(self):
		releaseAllClones(g_clonenames)
		f_value = "This is basically me building my gaming pc"
		f_filename = singleClone(g_files["fixingComputer.jpg"].fullname)
		MetadataManagerL0.setDescr(f_filename, f_value)
		self.assertEqual(f_value, MetadataManagerL0.getDescr(f_filename))
		os.remove(f_filename)
		f_value = "Picture of a cat\n and a dog"
		f_filename = singleClone(g_files["catScreamPizza.jpg"].fullname)
		MetadataManagerL0.setDescr(f_filename, f_value)
		self.assertEqual(f_value, MetadataManagerL0.getDescr(f_filename))
		os.remove(f_filename)
		f_value = "art of a flash game about a penguin"
		f_filename = singleClone(g_files["rippledotzero.jpg"].fullname)
		MetadataManagerL0.setDescr(f_filename, f_value)
		self.assertEqual(f_value, MetadataManagerL0.getDescr(f_filename))
		os.remove(f_filename)

	def test_removeDescrResults(self):
		releaseAllClones(g_clonenames)
		f_filename = singleClone(g_files["fixingComputer.jpg"].fullname)
		MetadataManagerL0.wipeDescr(f_filename)
		self.assertEqual(False, MetadataManagerL0.containsDescr(f_filename))
		os.remove(f_filename)
		f_filename = singleClone(g_files["catScreamPizza.jpg"].fullname)
		MetadataManagerL0.wipeDescr(f_filename)
		self.assertEqual(False, MetadataManagerL0.containsDescr(f_filename))
		os.remove(f_filename)

	def test_setRatingResults(self):
		releaseAllClones(g_clonenames)
		f_value = 1
		f_filename = singleClone(g_files["fixingComputer.jpg"].fullname)
		MetadataManagerL0.setRating(f_filename, f_value)
		self.assertEqual(f_value, MetadataManagerL0.getRating(f_filename))
		os.remove(f_filename)
		f_value = 2
		f_filename = singleClone(g_files["catScreamPizza.jpg"].fullname)
		MetadataManagerL0.setRating(f_filename, f_value)
		self.assertEqual(f_value, MetadataManagerL0.getRating(f_filename))
		os.remove(f_filename)
		f_value = 2
		f_filename = singleClone(g_files["rippledotzero.jpg"].fullname)
		MetadataManagerL0.setRating(f_filename, f_value)
		self.assertEqual(f_value, MetadataManagerL0.getRating(f_filename))
		os.remove(f_filename)

	def test_setSourceResults(self):
		releaseAllClones(g_clonenames)
		f_value = "SampleURL"
		f_filename = singleClone(g_files["fixingComputer.jpg"].fullname)
		MetadataManagerL0.setSource(f_filename, f_value)
		self.assertEqual(f_value, MetadataManagerL0.getSource(f_filename))
		os.remove(f_filename)
		f_value = "SampleURL"
		f_filename = singleClone(g_files["catScreamPizza.jpg"].fullname)
		MetadataManagerL0.setSource(f_filename, f_value)
		self.assertEqual(f_value, MetadataManagerL0.getSource(f_filename))
		os.remove(f_filename)
		f_value = "SampleURL"
		f_filename = singleClone(g_files["rippledotzero.jpg"].fullname)
		MetadataManagerL0.setSource(f_filename, f_value)
		self.assertEqual(f_value, MetadataManagerL0.getSource(f_filename))
		os.remove(f_filename)

	def test_setOrgDateResults(self):
		releaseAllClones(g_clonenames)
		f_date = datetime.datetime.today()
		f_filename = singleClone(g_files["fixingComputer.jpg"].fullname)
		MetadataManagerL0.setOrgDate(f_filename, f_date)
		#print("str(MetadataManager.getOrgDate(f_filename))", str(MetadataManager.getOrgDate(f_filename)))
		self.assertEqual(str(f_date.strftime("%Y-%m-%d %H:%M:%S")), str(MetadataManagerL0.getOrgDate(f_filename)))
		os.remove(f_filename)
		f_filename = singleClone(g_files["catScreamPizza.jpg"].fullname)
		MetadataManagerL0.setOrgDate(f_filename, f_date)
		self.assertEqual(str(f_date.strftime("%Y-%m-%d %H:%M:%S")), str(MetadataManagerL0.getOrgDate(f_filename)))
		os.remove(f_filename)
		f_filename = singleClone(g_files["rippledotzero.jpg"].fullname)
		MetadataManagerL0.setOrgDate(f_filename, f_date)
		self.assertEqual(str(f_date.strftime("%Y-%m-%d %H:%M:%S")), str(MetadataManagerL0.getOrgDate(f_filename)))
		os.remove(f_filename)

#test for rating. must be int
#number must be between 1 and 5
#two similar tests for searchRating

if __name__ == '__main__':
	unittest.main()
