import unittest
import MetadataManagerL0
import datetime
import os

import MetadataManagerL1
from TestingManager import downloadGooglePicture, removeAllFiles, loadFiles, cloneThese, releaseAllClones, singleClone
from TData import g_files

g_allfiles = [
    g_files["fixingComputer.jpg"],
    g_files["catScreamPizza.jpg"],
    g_files["rippledotzero.jpg"],
    g_files["creepyCharger.gif"],
    g_files["Toaster.pdf"],
    g_files["Makefile"]]
g_loadednames = loadFiles(g_allfiles)
g_clonenames = cloneThese(g_loadednames)

class ErrorCheck_DelicateTests(unittest.TestCase):
    def test_fileNotFound(self):
        releaseAllClones(g_clonenames)
        self.assertRaises(FileNotFoundError, MetadataManagerL0.containsTitle, "Missing.jpg")
        self.assertRaises(FileNotFoundError, MetadataManagerL0.getTitle, "Missing.jpg")
        self.assertRaises(FileNotFoundError, MetadataManagerL0.setTitle, "Missing.jpg", "sampleTitle")
        self.assertRaises(FileNotFoundError, MetadataManagerL1.searchTitle, "Missing.jpg", "sampleTitle")
        self.assertRaises(FileNotFoundError, MetadataManagerL0.wipeTitle, "Missing.jpg")
        self.assertRaises(FileNotFoundError, MetadataManagerL0.getArtists, "Missing.jpg")
        self.assertRaises(FileNotFoundError, MetadataManagerL0.setArtists, "Missing.jpg", ["thing1", "thing2"])
        self.assertRaises(FileNotFoundError, MetadataManagerL1.searchArtists, "Missing.jpg", "sampleArtist")
        self.assertRaises(FileNotFoundError, MetadataManagerL1.addArtist, "Missing.jpg", "jobtitle: sampleArtist")
        self.assertRaises(FileNotFoundError, MetadataManagerL1.removeArtist, "Missing.jpg", "jobtitle: sampleArtist")
        self.assertRaises(FileNotFoundError, MetadataManagerL0.containsTags, "Missing.jpg")
        self.assertRaises(FileNotFoundError, MetadataManagerL0.getTags, "Missing.jpg")
        self.assertRaises(FileNotFoundError, MetadataManagerL0.setTags, "Missing.jpg", ["thing1", "thing2"])
        self.assertRaises(FileNotFoundError, MetadataManagerL1.searchTags, "Missing.jpg", "sampleTag")
        self.assertRaises(FileNotFoundError, MetadataManagerL1.addTag, "Missing.jpg", "sampleTag")
        self.assertRaises(FileNotFoundError, MetadataManagerL1.removeTag, "Missing.jpg", "sampleTag")
        self.assertRaises(FileNotFoundError, MetadataManagerL0.containsDescr, "Missing.jpg")
        self.assertRaises(FileNotFoundError, MetadataManagerL0.getDescr, "Missing.jpg")
        self.assertRaises(FileNotFoundError, MetadataManagerL0.setDescr, "Missing.jpg", "sample of a file's\n description")
        self.assertRaises(FileNotFoundError, MetadataManagerL1.searchDescr, "Missing.jpg", "line from a description")
        self.assertRaises(FileNotFoundError, MetadataManagerL1.addDescr, "Missing.jpg", "\nnew line for a description")
        self.assertRaises(FileNotFoundError, MetadataManagerL0.wipeDescr, "Missing.jpg")
        self.assertRaises(FileNotFoundError, MetadataManagerL0.containsRating, "Missing.jpg")
        self.assertRaises(FileNotFoundError, MetadataManagerL0.getRating, "Missing.jpg")
        self.assertRaises(FileNotFoundError, MetadataManagerL0.setRating, "Missing.jpg", 3)
        self.assertRaises(FileNotFoundError, MetadataManagerL1.searchRating, "Missing.jpg", 2)
        self.assertRaises(FileNotFoundError, MetadataManagerL0.containsSource, "Missing.jpg")
        self.assertRaises(FileNotFoundError, MetadataManagerL0.getSource, "Missing.jpg")
        self.assertRaises(FileNotFoundError, MetadataManagerL0.setSource, "Missing.jpg", "sampleurl")
        self.assertRaises(FileNotFoundError, MetadataManagerL1.searchSource, "Missing.jpg", "sampleurl")
        self.assertRaises(FileNotFoundError, MetadataManagerL0.containsOrgDate, "Missing.jpg")
        self.assertRaises(FileNotFoundError, MetadataManagerL0.getOrgDate, "Missing.jpg")
        self.assertRaises(FileNotFoundError, MetadataManagerL0.setOrgDate, "Missing.jpg", datetime.datetime.today())

    def test_noSupport(self):
        releaseAllClones(g_clonenames)
        """We don't support .gif files yet. So we have this error"""
        f_filename = singleClone(g_files["creepyCharger.gif"].fullname)
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL0.containsTitle, f_filename)
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL0.getTitle, f_filename)
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL0.setTitle, f_filename, "sampleTitle")
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL1.searchTitle, f_filename, "sampleTitle")
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL0.wipeTitle, f_filename)
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL0.getArtists, f_filename)
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL0.setArtists, f_filename, ["thing1", "thing2"])
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL1.searchArtists, f_filename, "sampleArtist")
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL1.addArtist, f_filename, "jobtitle: sampleArtist")
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL1.removeArtist, f_filename, "jobtitle: sampleArtist")
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL0.containsTags, f_filename)
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL0.getTags, f_filename)
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL0.setTags, f_filename, ["thing1", "thing2"])
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL1.searchTags, f_filename, "sampleTag")
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL1.addTag, f_filename, "sampleTag")
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL1.removeTag, f_filename, "sampleTag")
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL0.containsDescr, f_filename)
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL0.getDescr, f_filename)
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL0.setDescr, f_filename, "sample of a file's\n description")
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL1.searchDescr, f_filename, "line from a description")
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL1.addDescr, f_filename, "\nnew line for a description")
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL0.wipeDescr, f_filename)
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL0.containsRating, f_filename)
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL0.getRating, f_filename)
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL0.setRating, f_filename, 3)
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL1.searchRating, f_filename, 2)
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL0.containsSource, f_filename)
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL0.getSource, f_filename)
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL0.setSource, f_filename, "sampleurl")
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL1.searchSource, f_filename, "sampleurl")
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL0.containsOrgDate, f_filename)
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL0.getOrgDate, f_filename)
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL0.setOrgDate, f_filename, datetime.datetime.today())
        os.remove(f_filename)

    def test_weCantTakeThat(self):
        releaseAllClones(g_clonenames)
        f_filename = singleClone(g_files["Toaster.pdf"].fullname)
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL0.containsTitle, "Toaster.pdf")
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL0.getTitle, "Toaster.pdf")
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL0.setTitle, "Toaster.pdf", "sampleTitle")
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL1.searchTitle, "Toaster.pdf", "sampleTitle")
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL0.wipeTitle, f_filename)
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL0.getArtists, f_filename)
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL0.setArtists, f_filename, ["thing1", "thing2"])
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL1.searchArtists, f_filename, "sampleArtist")
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL1.addArtist, f_filename, "jobtitle: sampleArtist")
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL1.removeArtist, f_filename, "jobtitle: sampleArtist")
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL0.containsTags, f_filename)
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL0.getTags, f_filename)
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL0.setTags, f_filename, ["thing1", "thing2"])
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL1.searchTags, f_filename, "sampleTag")
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL1.addTag, f_filename, "sampleTag")
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL1.removeTag, f_filename, "sampleTag")
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL0.containsDescr, f_filename)
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL0.getDescr, f_filename)
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL0.setDescr, f_filename, "sample of a file's\n description")
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL1.searchDescr, f_filename, "line from a description")
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL1.addDescr, f_filename, "\nnew line for a description")
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL0.wipeDescr, f_filename)
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL0.containsRating, f_filename)
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL0.getRating, f_filename)
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL0.setRating, f_filename, 3)
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL1.searchRating, f_filename, 2)
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL0.containsSource, f_filename)
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL0.getSource, f_filename)
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL0.setSource, f_filename, "sampleurl")
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL1.searchSource, f_filename, "sampleurl")
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL0.containsOrgDate, f_filename)
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL0.getOrgDate, f_filename)
        self.assertRaises(MetadataManagerL0.UnsupportedFiletypeError, MetadataManagerL0.setOrgDate, f_filename, datetime.datetime.today())
        os.remove(f_filename)

    def test_whatEvenIsThat(self):
        releaseAllClones(g_clonenames)
        f_filename = singleClone(g_files["Makefile"].fullname)
        self.assertRaises(MetadataManagerL0.UnknownFiletypeError, MetadataManagerL0.containsTitle, f_filename)
        self.assertRaises(MetadataManagerL0.UnknownFiletypeError, MetadataManagerL0.getTitle, f_filename)
        self.assertRaises(MetadataManagerL0.UnknownFiletypeError, MetadataManagerL0.setTitle, f_filename, "sampleTitle")
        self.assertRaises(MetadataManagerL0.UnknownFiletypeError, MetadataManagerL1.searchTitle, f_filename, "sampleTitle")
        self.assertRaises(MetadataManagerL0.UnknownFiletypeError, MetadataManagerL0.wipeTitle, f_filename)
        self.assertRaises(MetadataManagerL0.UnknownFiletypeError, MetadataManagerL0.getArtists, f_filename)
        self.assertRaises(MetadataManagerL0.UnknownFiletypeError, MetadataManagerL0.setArtists, f_filename, ["thing1", "thing2"])
        self.assertRaises(MetadataManagerL0.UnknownFiletypeError, MetadataManagerL1.searchArtists, f_filename, "sampleArtist")
        self.assertRaises(MetadataManagerL0.UnknownFiletypeError, MetadataManagerL1.addArtist, f_filename, "jobtitle: sampleArtist")
        self.assertRaises(MetadataManagerL0.UnknownFiletypeError, MetadataManagerL1.removeArtist, f_filename, "jobtitle: sampleArtist")
        self.assertRaises(MetadataManagerL0.UnknownFiletypeError, MetadataManagerL0.containsTags, f_filename)
        self.assertRaises(MetadataManagerL0.UnknownFiletypeError, MetadataManagerL0.getTags, f_filename)
        self.assertRaises(MetadataManagerL0.UnknownFiletypeError, MetadataManagerL0.setTags, f_filename, ["thing1", "thing2"])
        self.assertRaises(MetadataManagerL0.UnknownFiletypeError, MetadataManagerL1.searchTags, f_filename, "sampleTag")
        self.assertRaises(MetadataManagerL0.UnknownFiletypeError, MetadataManagerL1.addTag, f_filename, "sampleTag")
        self.assertRaises(MetadataManagerL0.UnknownFiletypeError, MetadataManagerL1.removeTag, f_filename, "sampleTag")
        self.assertRaises(MetadataManagerL0.UnknownFiletypeError, MetadataManagerL0.containsDescr, f_filename)
        self.assertRaises(MetadataManagerL0.UnknownFiletypeError, MetadataManagerL0.getDescr, f_filename)
        self.assertRaises(MetadataManagerL0.UnknownFiletypeError, MetadataManagerL0.setDescr, f_filename, "sample of a file's\n description")
        self.assertRaises(MetadataManagerL0.UnknownFiletypeError, MetadataManagerL1.searchDescr, f_filename, "line from a description")
        self.assertRaises(MetadataManagerL0.UnknownFiletypeError, MetadataManagerL1.addDescr, f_filename, "\nnew line for a description")
        self.assertRaises(MetadataManagerL0.UnknownFiletypeError, MetadataManagerL0.wipeDescr, f_filename)
        self.assertRaises(MetadataManagerL0.UnknownFiletypeError, MetadataManagerL0.containsRating, f_filename)
        self.assertRaises(MetadataManagerL0.UnknownFiletypeError, MetadataManagerL0.getRating, f_filename)
        self.assertRaises(MetadataManagerL0.UnknownFiletypeError, MetadataManagerL0.setRating, f_filename, 3)
        self.assertRaises(MetadataManagerL0.UnknownFiletypeError, MetadataManagerL1.searchRating, f_filename, 2)
        self.assertRaises(MetadataManagerL0.UnknownFiletypeError, MetadataManagerL0.containsSource, f_filename)
        self.assertRaises(MetadataManagerL0.UnknownFiletypeError, MetadataManagerL0.getSource, f_filename)
        self.assertRaises(MetadataManagerL0.UnknownFiletypeError, MetadataManagerL0.setSource, f_filename, "sampleurl")
        self.assertRaises(MetadataManagerL0.UnknownFiletypeError, MetadataManagerL1.searchSource, f_filename, "sampleurl")
        self.assertRaises(MetadataManagerL0.UnknownFiletypeError, MetadataManagerL0.containsOrgDate, f_filename)
        self.assertRaises(MetadataManagerL0.UnknownFiletypeError, MetadataManagerL0.getOrgDate, f_filename)
        self.assertRaises(MetadataManagerL0.UnknownFiletypeError, MetadataManagerL0.setOrgDate, f_filename, datetime.datetime.today())
        os.remove(f_filename)

#test for rating. must be int
#number must be between 1 and 5
#two similar tests for searchRating

if __name__ == '__main__':
    unittest.main()
